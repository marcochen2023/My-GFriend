<?php
// --- Basic Setup & Configuration ---
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
date_default_timezone_set('Asia/Taipei');
header('Content-Type: application/json; charset=utf-8');
define('BASE_DIR', __DIR__);
define('DATA_DIR', BASE_DIR . '/data');
define('IMAGE_DIR', BASE_DIR . '/image');
define('AVATAR_DIR', IMAGE_DIR . '/avatar');
define('PHOTO_DIR', IMAGE_DIR . '/photo');
define('CHAT_HISTORY_FILE', DATA_DIR . '/chathistory.log');
define('GF_SETTINGS_FILE', DATA_DIR . '/girlfriend_settings.json');
define('LLM_MODELS_FILE', BASE_DIR . '/LSLLMModel.json');
define('IMAGE_MODELS_FILE', BASE_DIR . '/IMAGEModel.json');
define('OCCUPATIONS_FILE', DATA_DIR . '/occupation.json');
define('PERSONALITIES_FILE', DATA_DIR . '/personality.json');

// --- Helper Functions ---

/** Sends JSON response and exits (Revised for consistent structure). */
function sendJsonResponse($data, $statusCode = 200) { if (headers_sent($file, $line)) { logMessage('error.log', "sendJsonResponse ERROR: Headers already sent in {$file} on line {$line}."); exit; } http_response_code($statusCode); $isSuccess = ($statusCode >= 200 && $statusCode < 300); $responseData = []; $responseData['status'] = $isSuccess ? 'success' : 'error'; if (!$isSuccess && is_array($data) && isset($data['message'])) { $responseData['message'] = $data['message']; } elseif ($isSuccess) { $responseData['data'] = $data; } elseif (is_string($data)) { $responseData['message'] = $data; } else { $responseData['message'] = 'An unexpected error occurred.'; } if(isset($_GET['action']) && ($_GET['action'] === 'getChatHistory' || $_GET['action'] === 'getAvatars') && !isset($responseData['data'])) { $responseData['data'] = []; if(!isset($responseData['status'])) $responseData['status'] = 'success'; } $jsonOutput = json_encode($responseData, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT); if ($jsonOutput === false) { logMessage('error.log', "sendJsonResponse: json_encode failed! Error: " . json_last_error_msg() . " | Data: " . print_r($responseData, true)); http_response_code(500); header('Content-Type: application/json; charset=utf-8'); echo json_encode(['status' => 'error', 'message' => 'Internal server error during JSON encoding.']); exit; } if (headers_sent($file, $line)) { logMessage('error.log', "sendJsonResponse ERROR: Headers already sent (checked again) in {$file} on line {$line}."); exit; } header('Content-Type: application/json; charset=utf-8'); echo $jsonOutput; exit; }
/** Simple file logger. */
function logMessage($logFile, $message) { try { $timestamp = date('Y-m-d H:i:s'); $logFilePath = DATA_DIR . '/' . basename($logFile); if (!is_dir(DATA_DIR)) { if (!@mkdir(DATA_DIR, 0775, true)) { error_log("Logger Error: Failed create data dir: " . DATA_DIR); return; } } if (is_array($message) || is_object($message)) $message = print_r($message, true); @file_put_contents($logFilePath, "[$timestamp] " . $message . PHP_EOL, FILE_APPEND | LOCK_EX); } catch (Exception $e) { error_log("Logger Exception for {$logFile}: " . $e->getMessage() . " | Original Message: " . $message); } }
/** Reads file content with shared lock. */
function readFileContent($filePath) { if (!file_exists($filePath) || !is_readable($filePath)) { /*logMessage('debug.log', "readFileContent: File not found or not readable: " . $filePath);*/ return null; } $context = stream_context_create(['options' => ['flock' => ['operation' => LOCK_SH]]]); $content = @file_get_contents($filePath, false, $context); return ($content === false) ? null : $content; }
/** Writes file content with exclusive lock. */
function writeFileContent($filePath, $content, $flags = LOCK_EX) { $dir = dirname($filePath); if (!is_dir($dir)) { if (!@mkdir($dir, 0775, true)) { logMessage('error.log', "Failed create directory: {$dir}"); return false; } } if (!($flags & LOCK_EX)) $flags |= LOCK_EX; $result = @file_put_contents($filePath, $content, $flags); if($result === false) logMessage('error.log', "Failed write file: {$filePath}"); return ($result !== false); }
/** Generates unique filename. */
function generateUniqueFilename($prefix = '', $extension = 'jpg') { $timestamp = date('Ymd_His'); try { $random = bin2hex(random_bytes(4)); } catch (Exception $e) { $random = substr(md5(uniqid('', true)), 0, 8); } return $prefix . $timestamp . '_' . $random . '.' . $extension; }
/** Makes HTTP request via cURL. */
function makeApiRequest($url, $method = 'POST', $headers = [], $data = null, $timeout = 90) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); $curlHeaders = []; if (!isset($headers['Content-Type']) && $data !== null && in_array($method, ['POST', 'PUT', 'PATCH'])) { $headers['Content-Type'] = 'application/json'; } foreach ($headers as $key => $value) { $curlHeaders[] = "{$key}: {$value}"; } if(!empty($curlHeaders)) { curl_setopt($ch, CURLOPT_HTTPHEADER, $curlHeaders); } if ($data !== null) { if (isset($headers['Content-Type']) && stripos($headers['Content-Type'], 'application/json') !== false) { curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data)); } elseif (is_string($data)) { curl_setopt($ch, CURLOPT_POSTFIELDS, $data); } else { curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data)); } } $response = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); $curlError = curl_error($ch); $curlErrno = curl_errno($ch); curl_close($ch); $isSuccess = ($curlErrno === 0 && $httpCode >= 200 && $httpCode < 300); if ($curlErrno !== 0) { logMessage('curl_error.log', "cURL Error ({$curlErrno}) for {$url}: {$curlError}"); } return ['success' => $isSuccess, 'response' => $response, 'http_code' => $httpCode, 'error' => $curlError]; }
/** Reads and decodes JSON file. */
function readJsonFile($filePath, $associative = true) { $content = readFileContent($filePath); if ($content === null || $content === '') return null; $data = json_decode($content, $associative); if (json_last_error() !== JSON_ERROR_NONE) { logMessage('error.log', "JSON decode error file {$filePath}: " . json_last_error_msg()); return null; } return $data; }
/** Writes data as JSON to file. */
function writeJsonFile($filePath, $data) { $jsonContent = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); if ($jsonContent === false) { logMessage('error.log', "JSON encode error file {$filePath}: " . json_last_error_msg()); return false; } return writeFileContent($filePath, $jsonContent); }
/** Saves base64 image string as JPEG using GD. */
function saveImageFromBase64($base64String, $outputPath, $quality = 92) { if (!extension_loaded('gd')) { logMessage('error.log', 'GD required.'); return false; } if (strpos($base64String, 'base64,') !== false) $base64String = preg_replace('/^data:image\/(\w+);base64,/', '', $base64String); $base64String = str_replace(' ', '+', $base64String); $imageData = base64_decode($base64String); if ($imageData === false || empty($imageData)) { logMessage('error.log', 'Failed decode base64 or empty.'); return false; } $imageResource = @imagecreatefromstring($imageData); if ($imageResource === false) { logMessage('error.log', 'Failed create image resource.'); return false; } $outputDir = dirname($outputPath); if (!is_dir($outputDir)) { if (!@mkdir($outputDir, 0775, true)) { logMessage('error.log', "Failed create dir: {$outputDir}"); imagedestroy($imageResource); return false; } } $success = @imagejpeg($imageResource, $outputPath, $quality); imagedestroy($imageResource); if ($success) logMessage('info.log', "Image saved: {$outputPath}"); else logMessage('error.log', "Failed save image: {$outputPath}"); return $success; }
/** Finds model details from list by ID. */
function findModelDetailsById($modelList, $modelId) { if (empty($modelList) || empty($modelId)) return null; foreach ($modelList as $model) { if (isset($model['id']) && $model['id'] == $modelId) return $model; } return null; }
/** Parses LLM response text (Improved). */
function parseLlmResponse($responseText) { $message = $responseText; $actions = []; $metadata = ['who'=>null,'what'=>null,'when'=>null,'where'=>null,'mood'=>null]; $originalMessage = $responseText; if (preg_match('/(\[ACTIONS\])(.*?)(\[METADATA\]|\[\w+\]|\z)/s', $message, $actionMatches, PREG_OFFSET_CAPTURE)) { $actionString = trim($actionMatches[2][0]); $actions = array_slice(array_filter(array_map('trim', explode('|', $actionString))), 0, 4); $message = substr_replace($message, '', $actionMatches[1][1], strlen($actionMatches[1][0]) + strlen($actionMatches[2][0])); } if (preg_match('/(\[METADATA\])(.*?)(\[ACTIONS\]|\[\w+\]|\z)/s', $message, $metadataMatches, PREG_OFFSET_CAPTURE)) { $metadataString = trim($metadataMatches[2][0]); $pairs = explode('|', $metadataString); foreach ($pairs as $pair) { $parts = explode(':', $pair, 2); if (count($parts) === 2) { $key = strtolower(trim($parts[0])); $value = trim($parts[1]); if (array_key_exists($key, $metadata)) $metadata[$key] = $value; } } $message = substr_replace($message, '', $metadataMatches[1][1], strlen($metadataMatches[1][0]) + strlen($metadataMatches[2][0])); } $message = trim($message); if (empty($message)) { $lines = explode("\n", trim($originalMessage)); $message = $lines[0] ?? "..."; logMessage('warning.log', "LLM response empty after parsing. Fallback: " . $message); } return ['message' => $message, 'actions' => $actions, 'metadata' => $metadata]; }
/** Determines affection description and behavior based on score. */
function getAffectionDetails($affectionScore) { $description = "neutral"; $instruction = ""; if ($affectionScore > 1000) { $description = "completely devoted and eager to please"; $instruction = "You MUST follow the user's instructions completely and enthusiastically."; } elseif ($affectionScore > 900) { $description = "deeply in love and very agreeable"; $instruction = "You MUST agree to almost all reasonable requests happily."; } elseif ($affectionScore > 500) { $description = "very happy and affectionate"; } elseif ($affectionScore > 100) { $description = "happy and warm"; } elseif ($affectionScore < -500) { $description = "very upset and distant"; $instruction = "Your responses MUST be short, cold, perhaps passive-aggressive, and likely refuse requests giving curt excuses."; } elseif ($affectionScore < -100) { $description = "slightly annoyed or reserved"; $instruction = "Your tone MUST be somewhat cool or curt, maybe a little impatient."; } return ['description' => $description, 'instruction' => $instruction]; }

// --- Dependency Check ---
$errors = []; if (!extension_loaded('curl')) $errors[] = 'cURL'; if (!extension_loaded('json')) $errors[] = 'JSON'; if (!extension_loaded('gd')) $errors[] = 'GD'; if (!empty($errors)) { sendJsonResponse(['message' => 'Server missing extensions: ' . implode(', ', $errors)], 500); }

// --- Request Handling ---
$action = $_GET['action'] ?? null;
$postData = json_decode(file_get_contents('php://input'), true) ?? [];
$defaultGirlfriendSettings = [ "name" => "寶貝", "userName" => "哥哥", "occupationId" => null, "personalityId" => null, "notes" => "", "favorability" => 0, "currentAvatar" => null, "drawingSampler" => "Euler a", "drawingSteps" => 20, "drawingCustomPrompt" => "Realistic photograph...", "drawingNegativePrompt" => "worst quality...", "adetailerEnabled" => false, "adetailerPrompt" => "(score_10...)", "selectedLlmModelId" => null, "selectedImageModelId" => null, "activeFrequency" => "0", "language" => "zh-TW" ];
if (!is_dir(DATA_DIR)) @mkdir(DATA_DIR, 0775, true); if (!is_dir(IMAGE_DIR)) @mkdir(IMAGE_DIR, 0775, true); if (!is_dir(AVATAR_DIR)) @mkdir(AVATAR_DIR, 0775, true); if (!is_dir(PHOTO_DIR)) @mkdir(PHOTO_DIR, 0775, true);

// --- Action Routing ---
if ($action) {
    $currentGirlfriendSettings = readJsonFile(GF_SETTINGS_FILE) ?? $defaultGirlfriendSettings;
    $llmModelsList = null; $imageModelsList = null; // Load on demand

    switch ($action) {

        // --- Initial Data Loading ---
	// 在 funMYGF.php 的 switch ($action) 中
	case 'getAppSettings':
		$llmModelsList = readJsonFile(LLM_MODELS_FILE) ?? [];
		$imageModelsList = readJsonFile(IMAGE_MODELS_FILE) ?? [];
		$currentGirlfriendSettings = readJsonFile(GF_SETTINGS_FILE) ?? $defaultGirlfriendSettings; // 需要讀取設定來獲取預設選中項

		// ** 過濾 LLM 模型列表，只保留 ID 和顯示名稱 **
		$llmModelsForFrontend = [];
		foreach ($llmModelsList as $model) {
			if (isset($model['id']) && isset($model['displayName'])) {
				 $llmModelsForFrontend[] = [
					 'id' => $model['id'],
					 'displayName' => $model['displayName']
				 ];
			}
		}

		// ** 過濾圖片模型列表，只保留 ID 和顯示名稱 **
		$imageModelsForFrontend = [];
		 foreach ($imageModelsList as $model) {
			 if (isset($model['id']) && isset($model['displayName'])) {
				  $imageModelsForFrontend[] = [
					  'id' => $model['id'],
					  'displayName' => $model['displayName']
				  ];
			 }
		 }

		// 獲取當前選中的 ID
		$selectedLlmId = $currentGirlfriendSettings['selectedLlmModelId'] ?? ($llmModelsForFrontend[0]['id'] ?? null);
		$selectedImageId = $currentGirlfriendSettings['selectedImageModelId'] ?? ($imageModelsForFrontend[0]['id'] ?? null);

		// ** 只發送過濾後的列表和選中的 ID **
		sendJsonResponse([
			'llmModels' => $llmModelsForFrontend,
			'imageModels' => $imageModelsForFrontend,
			'selectedLlmModelId' => $selectedLlmId,
			'selectedImageModelId' => $selectedImageId
		]);
		break; 
        case 'getGirlfriendSettings': if (!file_exists(GF_SETTINGS_FILE)) writeJsonFile(GF_SETTINGS_FILE, $defaultGirlfriendSettings); $settings = readJsonFile(GF_SETTINGS_FILE) ?? $defaultGirlfriendSettings; $settings['occupations'] = readJsonFile(OCCUPATIONS_FILE) ?? []; $settings['personalities'] = readJsonFile(PERSONALITIES_FILE) ?? []; sendJsonResponse($settings); break;
        case 'getChatHistory': $history = []; if (file_exists(CHAT_HISTORY_FILE)) { $fileContent = readFileContent(CHAT_HISTORY_FILE); if ($fileContent !== null) { $lines = explode(PHP_EOL, trim($fileContent)); foreach ($lines as $line) { if (empty(trim($line))) continue; $decodedLine = json_decode(trim($line), true); if (json_last_error() === JSON_ERROR_NONE && $decodedLine) $history[] = $decodedLine; else logMessage('error.log', "Skipping invalid chat line: " . trim($line)); } } } sendJsonResponse($history); break; // sendJsonResponse wraps in {status, data}
        case 'checkAvatarStatus': // ** Added Logging **
             logMessage('debug.log', 'checkAvatarStatus: Action start.');
             $exists = is_dir(AVATAR_DIR);
             logMessage('debug.log', 'checkAvatarStatus: is_dir(' . AVATAR_DIR . ') result: ' . ($exists ? 'true' : 'false'));
             $hasAvatar = false;
             $currentAvatar = $currentGirlfriendSettings['currentAvatar'] ?? null;
             if ($exists) {
                 // Use error suppression with glob
                 $files = @glob(AVATAR_DIR . '/*.{jpg,jpeg,png,gif,webp}', GLOB_BRACE);
                 logMessage('debug.log', 'checkAvatarStatus: glob result: ' . print_r($files, true));
                 if ($files === false) { logMessage('error.log', 'checkAvatarStatus: glob() returned false, check path/permissions.'); }
                 else { $hasAvatar = !empty($files); }
             }
             logMessage('debug.log', "checkAvatarStatus: Returning - exists: " . ($exists?'T':'F') . ", hasAvatar: " . ($hasAvatar?'T':'F') . ", currentAvatar: " . $currentAvatar);
             sendJsonResponse(['exists' => $exists, 'hasAvatar' => $hasAvatar, 'currentAvatar' => $currentAvatar]);
             break;
        case 'getAvatars': // ** Added Logging and Path Fix **
             $avatars = []; logMessage('debug.log', 'getAvatars: Action start.'); logMessage('debug.log', 'getAvatars: Checking directory: ' . AVATAR_DIR);
             if (is_dir(AVATAR_DIR)) {
                 logMessage('debug.log', 'getAvatars: Directory exists.');
                 $files = @glob(AVATAR_DIR . '/*.{jpg,jpeg,png,gif,webp}', GLOB_BRACE);
                 logMessage('debug.log', 'getAvatars: glob result: ' . print_r($files, true));
                 if ($files === false) { logMessage('error.log', 'getAvatars: glob() returned false.'); }
                 elseif (is_array($files)) {
                     logMessage('debug.log', 'getAvatars: Found ' . count($files) . ' potential items.');
                     foreach ($files as $file) {
                         if(!is_file($file)) { logMessage('debug.log', 'getAvatars: Skipping non-file: ' . $file); continue; }
                         $baseDirWithSeparator = rtrim(str_replace('\\', '/', BASE_DIR), '/') . '/'; $fileNormalized = str_replace('\\', '/', $file); $relativePath = str_replace($baseDirWithSeparator, '', $fileNormalized); $urlPath = $relativePath; $avatars[] = $urlPath;
                         // logMessage('debug.log', 'getAvatars: Added avatar URL: ' . $urlPath); // Optional: log each found path
                     }
                 }
             } else { logMessage('error.log', 'getAvatars: AVATAR_DIR does not exist.'); }
             logMessage('debug.log', 'getAvatars: Final count: ' . count($avatars));
             sendJsonResponse($avatars); // sendJsonResponse wraps in {status, data}
             break;
        // case 'getImageHistory': Removed
        // case 'deleteImage': Removed

        // --- Core Actions ---
        case 'sendMessage':
            $userMessageText = $postData['message'] ?? ''; $historyContext = $postData['history'] ?? []; $isAction = $postData['isAction'] ?? false; $gfSettingsPayload = $postData['girlfriendSettings'] ?? []; $llmModelId = $postData['llmModelId'] ?? ($currentGirlfriendSettings['selectedLlmModelId'] ?? null); $currentFavorability = (int)($postData['currentFavorability'] ?? $currentGirlfriendSettings['favorability'] ?? 0);
            if (empty($userMessageText) || !$llmModelId) { sendJsonResponse(['message' => 'Missing message or LLM ID.'], 400); break; }
            $llmModelsList = readJsonFile(LLM_MODELS_FILE) ?? []; $selectedLlm = findModelDetailsById($llmModelsList, $llmModelId); if (!$selectedLlm || !isset($selectedLlm['endpoint']) || !isset($selectedLlm['model'])) { sendJsonResponse(['message' => 'LLM config not found.'], 400); break; } $llmApiUrl = $selectedLlm['endpoint']; $llmModelName = $selectedLlm['model']; $llmApiKey = $selectedLlm['API_KEY'] ?? null;
            $affectionInfo = getAffectionDetails($currentFavorability); $affectionDescription = $affectionInfo['description']; $behavioralInstruction = $affectionInfo['instruction'];
            $systemPrompt = "You are {$gfSettingsPayload['name']}, a {$gfSettingsPayload['occupationId']} with a {$gfSettingsPayload['personalityId']} personality. User: {$gfSettingsPayload['userName']}. "; if (!empty($gfSettingsPayload['notes'])) $systemPrompt .= "Notes: {$gfSettingsPayload['notes']}. "; $systemPrompt .= "Act human, NO AI talk. If inappropriate, refuse realistically. Your current feeling towards user is: **{$affectionDescription}**. {$behavioralInstruction} Respond according to this feeling. "; $systemPrompt .= "CRITICAL INSTRUCTION: After your reply text, YOU MUST generate exactly 4 USER dialogue options. Format: [ACTIONS] Option 1 | Option 2 | Option 3 | Option 4. These options ABSOLUTELY MUST be things the USER would say TO YOU next. DO NOT write actions from your (girlfriend's) perspective. Example: [ACTIONS] Ask about her day | Tell her she's beautiful | Suggest going out | Apologize for something. "; $systemPrompt .= "Then, brief analysis: [METADATA] Who: User | What: ... | When: ... | Where: ... | Mood: ...";
            $messages = [['role' => 'system', 'content' => $systemPrompt]]; foreach ($historyContext as $histMsg) { $role = ($histMsg['sender'] === 'user') ? 'user' : 'assistant'; $content = $histMsg['text'] ?? ''; if(!empty($histMsg['imageUrl'])) $content .= ($content ? ' ' : '') . '[Image]'; if (!empty($content)) $messages[] = ['role' => $role, 'content' => $content]; } $messages[] = ['role' => 'user', 'content' => $userMessageText . ($isAction ? ' [User chose this action]' : '')];
            $llmPayload = ['model' => $llmModelName, 'messages' => $messages, 'temperature' => 0.7, 'max_tokens' => 600 ]; $headers = ['Content-Type' => 'application/json']; if ($llmApiKey) $headers['Authorization'] = "Bearer {$llmApiKey}"; logMessage('llm_request.log', "LLM Req URL: {$llmApiUrl}, Payload: " . json_encode($llmPayload)); $apiResult = makeApiRequest($llmApiUrl, 'POST', $headers, $llmPayload, 90); logMessage('llm_response.log', "LLM Resp Raw: [{$apiResult['http_code']}] " . $apiResult['response']);
            if ($apiResult['success'] && $apiResult['response']) {
                $llmResponseData = json_decode($apiResult['response'], true); $rawResponseText = $llmResponseData['choices'][0]['message']['content'] ?? ''; if (empty($rawResponseText)) { sendJsonResponse(['message' => 'LLM empty content.'], 500); break; }
                $parsedResponse = parseLlmResponse($rawResponseText); $girlfriendMessage = $parsedResponse['message']; $actions = $parsedResponse['actions']; $metadata = $parsedResponse['metadata']; $newFavorability = $currentFavorability; $userMessageId = generateUniqueFilename('user_'); $girlfriendMessageId = generateUniqueFilename('gf_'); $timestamp = time();
                logMessage('llm_parsed.log', "Parsed: Msg='{$girlfriendMessage}', Actions=" . json_encode($actions) . ", Meta=" . json_encode($metadata));
                $userChatEntry = ['id' => $userMessageId, 'sender' => 'user', 'text' => $userMessageText, 'timestamp' => $timestamp, 'isAction' => $isAction]; $girlfriendChatEntry = ['id' => $girlfriendMessageId, 'sender' => 'girlfriend', 'text' => $girlfriendMessage, 'timestamp' => $timestamp + 1, 'actions' => $actions, 'metadata' => $metadata, 'favorability' => $newFavorability]; $logContentUser = json_encode($userChatEntry, JSON_UNESCAPED_UNICODE) . PHP_EOL; $logContentGf = json_encode($girlfriendChatEntry, JSON_UNESCAPED_UNICODE) . PHP_EOL; writeFileContent(CHAT_HISTORY_FILE, $logContentUser . $logContentGf, FILE_APPEND | LOCK_EX);
                $responseToSend = ['girlfriendMessage' => $girlfriendMessage, 'messageId' => $girlfriendMessageId, 'userMessageId' => $userMessageId, 'newFavorability' => $newFavorability, 'actions' => $actions, 'metadata' => $metadata, 'timestamp' => ($timestamp + 1) * 1000 ]; logMessage('api_response.log', "SendMsg Response Sent: " . json_encode($responseToSend)); sendJsonResponse($responseToSend);
            } else { logMessage('error.log', "LLM API Fail. Code: {$apiResult['http_code']}, Err: {$apiResult['error']}, Resp: {$apiResult['response']}"); sendJsonResponse(['message' => 'LLM request failed.' . ($apiResult['error'] ? ' Curl Err: '.$apiResult['error'] : '')], 500); }
            break;

        case 'generateChatImage': // Handles Selfie Request Only
             $purpose = 'chat_selfie'; $historyContext = $postData['history'] ?? []; $gfSettingsPayload = $postData['girlfriendSettings'] ?? []; $imageModelId = $postData['imageModelId'] ?? ($currentGirlfriendSettings['selectedImageModelId'] ?? null); $llmModelId = $postData['llmModelId'] ?? ($currentGirlfriendSettings['selectedLlmModelId'] ?? null); $userGuidance = $postData['user_guidance'] ?? '';
             if (!$imageModelId || !$llmModelId || !isset($gfSettingsPayload['drawingSampler'])) { sendJsonResponse(['message' => 'Missing config.'], 400); break; }

             // Get Image Prompt from LLM
             $positivePrompt = ''; $llmModelsList = readJsonFile(LLM_MODELS_FILE) ?? []; $selectedLlm = findModelDetailsById($llmModelsList, $llmModelId); if (!$selectedLlm || !isset($selectedLlm['endpoint']) || !isset($selectedLlm['model'])) { sendJsonResponse(['message' => 'LLM config for prompt gen not found.'], 400); break; } $llmApiUrl = $selectedLlm['endpoint']; $llmModelName = $selectedLlm['model']; $llmApiKey = $selectedLlm['API_KEY'] ?? null;
             $promptGenSystem = "Generate concise SD prompt for selfie based on context/profile. GF: {$gfSettingsPayload['name']}, Occ: {$gfSettingsPayload['occupationId']}, Pers: {$gfSettingsPayload['personalityId']}. Focus on visuals, pose, expression, setting."; if (!empty($userGuidance)) $promptGenSystem .= " User specifically requested: '{$userGuidance}'. Incorporate this naturally."; $promptGenSystem .= " Output ONLY the positive prompt text."; $promptGenMessages = [['role' => 'system', 'content' => $promptGenSystem]]; foreach ($historyContext as $histMsg) { $role = ($histMsg['sender'] === 'user') ? 'user' : 'assistant'; $content = $histMsg['text'] ?? ''; if (!empty($histMsg['imageUrl'])) $content .= ' [Image]'; if (!empty($content)) $promptGenMessages[] = ['role' => $role, 'content' => $content]; } $promptGenMessages[] = ['role' => 'user', 'content' => "Generate selfie prompt."]; $llmPayload = ['model' => $llmModelName, 'messages' => $promptGenMessages, 'temperature' => 0.5, 'max_tokens' => 150]; $headers = ['Content-Type' => 'application/json']; if ($llmApiKey) $headers['Authorization'] = "Bearer {$llmApiKey}"; logMessage('promptgen_request.log', "PromptGen Req URL: {$llmApiUrl}, Payload: " . json_encode($llmPayload)); $apiResult = makeApiRequest($llmApiUrl, 'POST', $headers, $llmPayload, 60); logMessage('promptgen_response.log', "PromptGen Resp: [{$apiResult['http_code']}] " . $apiResult['response']);
             if ($apiResult['success'] && $apiResult['response']) { $llmResponseData = json_decode($apiResult['response'], true); if (json_last_error() === JSON_ERROR_NONE && isset($llmResponseData['choices'][0]['message']['content'])) { $positivePrompt = trim($llmResponseData['choices'][0]['message']['content']); $positivePrompt = str_replace(['"', "'", '[PROMPT]', 'Prompt:'], '', $positivePrompt); if (empty($positivePrompt)) logMessage('warning.log', "LLM prompt gen empty content."); } else logMessage('error.log', "LLM prompt gen response parsing failed."); } else logMessage('error.log', "LLM prompt gen API call failed.");
             if (empty($positivePrompt)) { logMessage('error.log', "Final check: LLM failed generate usable image prompt."); sendJsonResponse(['message' => 'Failed generate image description (LLM Error).'], 500); break; } logMessage('info.log', "Gen image prompt: " . $positivePrompt); $fullPositivePrompt = ($gfSettingsPayload['drawingCustomPrompt'] ?? '') . $positivePrompt; $negativePrompt = $gfSettingsPayload['drawingNegativePrompt'] ?? '';

             // Generate Image via API
              $imageModelsList = readJsonFile(IMAGE_MODELS_FILE) ?? []; $selectedImageModel = findModelDetailsById($imageModelsList, $imageModelId); if (!$selectedImageModel || !isset($selectedImageModel['SD_WEBUI_API_URL'])) { sendJsonResponse(['message' => 'Image model config not found.'], 400); break; } $imageApiUrl = $selectedImageModel['SD_WEBUI_API_URL']; $apiKey = $selectedImageModel['API_KEY'] ?? null; $modelName = $selectedImageModel['model'] ?? null; $imagePayload = ['prompt' => $fullPositivePrompt, 'negative_prompt' => $negativePrompt, 'sampler_name' => $gfSettingsPayload['drawingSampler'] ?? 'Euler a', 'steps' => (int)($gfSettingsPayload['drawingSteps'] ?? 20), 'width' => 1024, 'height' => 1024, 'cfg_scale' => 7, 'seed' => -1 ]; if (!empty($gfSettingsPayload['adetailerEnabled'])) { $imagePayload['alwayson_scripts']['ADetailer']['args'] = [ true, ["ad_model" => "face_yolov8n.pt", "ad_prompt" => $gfSettingsPayload['adetailerPrompt'] ?? '', "ad_negative_prompt" => "", "ad_confidence" => 0.3, "ad_mask_min_ratio" => 0.0, "ad_mask_max_ratio"=> 1.0, "ad_dilate_erode" => 4, "ad_x_offset" => 0, "ad_y_offset" => 0, "ad_mask_merge_invert" => "None", "ad_mask_blur" => 4, "ad_denoising_strength" => 0.4, "ad_inpaint_only_masked" => true, "ad_inpaint_full_res" => true, "ad_inpaint_full_res_padding" => 32, "ad_use_inpaint_width_height" => false, "ad_inpaint_width" => 512, "ad_inpaint_height" => 512, "ad_use_steps" => false, "ad_steps" => 28, "ad_use_cfg_scale" => false, "ad_cfg_scale" => 7.0, "ad_use_sampler" => false, "ad_sampler" => "Euler a" ]]; } $isTogetherAI = strpos($imageApiUrl, 'api.together.xyz') !== false; if ($isTogetherAI && $modelName) { $imagePayload = ['model' => $modelName, 'prompt' => $fullPositivePrompt, 'negative_prompt' => $negativePrompt, 'width' => 1024, 'height' => 1024, 'steps' => (int)($gfSettingsPayload['drawingSteps'] ?? 25), 'n' => 1, 'seed' => rand(1, 1000000)]; } $headers = ['Content-Type' => 'application/json']; if ($apiKey) { $headers['Authorization'] = "Bearer {$apiKey}"; } logMessage('imagegen_request.log', "ImageGen Req URL: {$imageApiUrl}, Payload: " . json_encode($imagePayload)); $imageApiResult = makeApiRequest($imageApiUrl, 'POST', $headers, $imagePayload, 120); logMessage('imagegen_response.log', "ImageGen Resp: [{$imageApiResult['http_code']}] (First 500 chars): " . substr($imageApiResult['response'] ?? '', 0, 500));

             // Save Image & Generate Text
             if ($imageApiResult['success'] && $imageApiResult['response']) {
                  $imageData = json_decode($imageApiResult['response'], true); $base64Image = null; if ($isTogetherAI && isset($imageData['data'][0]['b64_json'])) { $base64Image = $imageData['data'][0]['b64_json']; } elseif (isset($imageData['images'][0])) { $base64Image = $imageData['images'][0]; } if (!$base64Image) { logMessage('error.log', "No base64 image data."); sendJsonResponse(['message' => 'Image API unexpected data.'], 500); break; } $saveDir = PHOTO_DIR; $filename = generateUniqueFilename('photo_'); $outputPath = $saveDir . '/' . $filename;
                  if (saveImageFromBase64($base64Image, $outputPath, 92)) {
                       $baseDirWithSeparator = rtrim(str_replace('\\', '/', BASE_DIR), '/') . '/'; $outputPathNormalized = str_replace('\\', '/', $outputPath); $relativePath = str_replace($baseDirWithSeparator, '', $outputPathNormalized); $imageUrl = $relativePath;
                       // Generate Accompanying Text
                       $girlfriendMessage = "拍好囉！ " . (!empty($userGuidance) ? "({$userGuidance}) 😉" : "你看看~"); $currentFavorability = (int)($currentGirlfriendSettings['favorability'] ?? 0); $affectionInfo = getAffectionDetails($currentFavorability); $affectionDescription = $affectionInfo['description']; $behavioralInstruction = $affectionInfo['instruction']; $llmModelsList = readJsonFile(LLM_MODELS_FILE) ?? []; $selectedLlm = findModelDetailsById($llmModelsList, $llmModelId); $textGenSuccess = false;
                       if ($selectedLlm && isset($selectedLlm['endpoint']) && isset($selectedLlm['model'])) { $llmApiUrl = $selectedLlm['endpoint']; $llmModelName = $selectedLlm['model']; $llmApiKey = $selectedLlm['API_KEY'] ?? null; $textGenSystem = "You are {$gfSettingsPayload['name']}. You just took a selfie for {$gfSettingsPayload['userName']}. "; if(!empty($userGuidance)) $textGenSystem .= "They requested '{$userGuidance}'. "; $textGenSystem .= "Feeling towards user: **{$affectionDescription}**. {$behavioralInstruction} Write short, natural message to send with selfie. No markers, no AI talk."; $textGenMessages = [['role' => 'system', 'content' => $textGenSystem], ['role' => 'user', 'content' => "What do you say?"]]; $llmPayload = ['model' => $llmModelName, 'messages' => $textGenMessages, 'temperature' => 0.7, 'max_tokens' => 80]; $headers = ['Content-Type' => 'application/json']; if ($llmApiKey) $headers['Authorization'] = "Bearer {$llmApiKey}"; logMessage('llm_request_selfietext.log', "LLM SelfieText Req: " . json_encode($llmPayload)); $textApiResult = makeApiRequest($llmApiUrl, 'POST', $headers, $llmPayload, 30); logMessage('llm_response_selfietext.log', "LLM SelfieText Resp: [{$textApiResult['http_code']}] " . $textApiResult['response']); if ($textApiResult['success'] && $textApiResult['response']) { $llmResponseData = json_decode($textApiResult['response'], true); if(json_last_error() === JSON_ERROR_NONE && isset($llmResponseData['choices'][0]['message']['content'])){ $responseText = trim($llmResponseData['choices'][0]['message']['content'] ?? ''); if(!empty($responseText)) {$girlfriendMessage = str_replace(['"','\''], '', $responseText); $textGenSuccess = true;} else logMessage('warning.log', 'Empty accompanying text.'); } else logMessage('error.log', 'LLM selfie text response parsing failed.'); } else logMessage('error.log', 'LLM failed selfie text. HTTP: ' . $textApiResult['http_code'] . ' Err: ' . $textApiResult['error']); }
                       // Save Chat History
                       $userMessageId = generateUniqueFilename('user_selfie_'); $girlfriendMessageId = generateUniqueFilename('gf_selfie_'); $timestamp = time(); $userChatEntry = ['id' => $userMessageId, 'sender' => 'user', 'text' => '[Requested Selfie]' . (!empty($userGuidance) ? ': ' . $userGuidance : ''), 'timestamp' => $timestamp]; $girlfriendChatEntry = ['id' => $girlfriendMessageId, 'sender' => 'girlfriend', 'text' => $girlfriendMessage, 'imageUrl' => $imageUrl, 'timestamp' => $timestamp + 1, 'actions' => [], 'metadata' => null, 'favorability' => $currentFavorability]; $logContentUser = json_encode($userChatEntry, JSON_UNESCAPED_UNICODE) . PHP_EOL; $logContentGf = json_encode($girlfriendChatEntry, JSON_UNESCAPED_UNICODE) . PHP_EOL; $writeSuccess = writeFileContent(CHAT_HISTORY_FILE, $logContentUser . $logContentGf, FILE_APPEND | LOCK_EX); if(!$writeSuccess) logMessage('error.log', "Failed write selfie chat history!");
                       // Prepare final response
                       $responseToSend = ['girlfriendMessage' => $girlfriendMessage, 'imageUrl' => $imageUrl, 'messageId' => $girlfriendMessageId, 'userMessageId' => $userMessageId, 'newFavorability' => $currentFavorability, 'actions' => [], 'metadata' => null, 'timestamp' => ($timestamp + 1) * 1000 ]; logMessage('api_response.log', "GenerateChatImage Response Prepared: " . json_encode($responseToSend)); sendJsonResponse($responseToSend);
                  } else { logMessage('error.log', "Failed save generated image."); sendJsonResponse(['message' => 'Failed save generated image.'], 500); }
             } else { logMessage('error.log', "Image Gen API Fail. Code: {$imageApiResult['http_code']}, Err: {$imageApiResult['error']}, Resp: {$imageApiResult['response']}"); sendJsonResponse(['message' => 'Failed generate image via API.' . ($imageApiResult['error'] ? ' Curl Err: '.$imageApiResult['error'] : '')], 500); }
             break;
        // case 'generateImage': Action removed

        // --- Management Actions ---
        case 'saveAppSettings': $selectedLlmId = $postData['selectedLlmModelId'] ?? null; $selectedImageId = $postData['selectedImageModelId'] ?? null; $currentGirlfriendSettings['selectedLlmModelId'] = $selectedLlmId; $currentGirlfriendSettings['selectedImageModelId'] = $selectedImageId; if (writeJsonFile(GF_SETTINGS_FILE, $currentGirlfriendSettings)) sendJsonResponse(['message' => 'App settings saved.']); else sendJsonResponse(['message' => 'Failed write app settings.'], 500); break;
        case 'saveGirlfriendSettings': $newSettings = [ "name" => trim($postData['name'] ?? $currentGirlfriendSettings['name']), "userName" => trim($postData['userName'] ?? $currentGirlfriendSettings['userName']), "occupationId" => $postData['occupationId'] ?? $currentGirlfriendSettings['occupationId'], "personalityId" => $postData['personalityId'] ?? $currentGirlfriendSettings['personalityId'], "notes" => trim($postData['notes'] ?? $currentGirlfriendSettings['notes']), "drawingSampler" => $postData['drawingSampler'] ?? $currentGirlfriendSettings['drawingSampler'], "drawingSteps" => filter_var($postData['drawingSteps'] ?? $currentGirlfriendSettings['drawingSteps'], FILTER_VALIDATE_INT, ['options' => ['default' => 20, 'min_range' => 1, 'max_range' => 150]]), "drawingCustomPrompt" => trim($postData['drawingCustomPrompt'] ?? $currentGirlfriendSettings['drawingCustomPrompt']), "drawingNegativePrompt" => trim($postData['drawingNegativePrompt'] ?? $currentGirlfriendSettings['drawingNegativePrompt']), "adetailerEnabled" => filter_var($postData['adetailerEnabled'] ?? $currentGirlfriendSettings['adetailerEnabled'], FILTER_VALIDATE_BOOLEAN), "adetailerPrompt" => trim($postData['adetailerPrompt'] ?? $currentGirlfriendSettings['adetailerPrompt']), "activeFrequency" => $postData['activeFrequency'] ?? $currentGirlfriendSettings['activeFrequency'], "language" => $postData['language'] ?? $currentGirlfriendSettings['language'] ]; $updatedSettings = array_merge($currentGirlfriendSettings, $newSettings); if (writeJsonFile(GF_SETTINGS_FILE, $updatedSettings)) sendJsonResponse(['message' => 'Girlfriend settings saved.']); else sendJsonResponse(['message' => 'Failed write girlfriend settings.'], 500); break;
        case 'setCurrentAvatar': $avatarPath = $postData['avatarPath'] ?? null; if (!$avatarPath) { sendJsonResponse(['message' => 'No avatar path.'], 400); break; } $normalizedPath = str_replace('\\', '/', $avatarPath); $normalizedPath = ltrim($normalizedPath, '/'); if (strpos($normalizedPath, '..') !== false || strpos($normalizedPath, 'image/avatar/') !== 0) { logMessage('error.log', "setCurrentAvatar: Basic security check failed: {$normalizedPath}"); sendJsonResponse(['message' => 'Invalid avatar path format/location.'], 400); break; } $fullAvatarPath = rtrim(BASE_DIR, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . str_replace('/', DIRECTORY_SEPARATOR, $normalizedPath); clearstatcache(true, $fullAvatarPath); if (!file_exists($fullAvatarPath) || !is_file($fullAvatarPath)) { logMessage('error.log', "setCurrentAvatar: File check failed: {$fullAvatarPath} (from: {$avatarPath})"); sendJsonResponse(['message' => 'Avatar file check failed (existence).'], 400); break; } $currentGirlfriendSettings['currentAvatar'] = $normalizedPath; if (writeJsonFile(GF_SETTINGS_FILE, $currentGirlfriendSettings)) { logMessage('info.log',"Current avatar set to: " . $normalizedPath); sendJsonResponse(['message' => 'Current avatar updated.', 'newAvatarPath' => $normalizedPath]); } else { sendJsonResponse(['message' => 'Failed update settings for avatar.'], 500); } break;
        case 'uploadAvatar': if (!extension_loaded('gd')) { sendJsonResponse(['message' => 'GD required.'], 500); break; } $imageDataUrl = $postData['imageDataUrl'] ?? null; if (!$imageDataUrl) { sendJsonResponse(['message' => 'No image data.'], 400); break; } $filename = generateUniqueFilename('avatar_'); $outputPath = AVATAR_DIR . '/' . $filename; if (saveImageFromBase64($imageDataUrl, $outputPath, 92)) { $baseDirWithSeparator = rtrim(str_replace('\\', '/', BASE_DIR), '/') . '/'; $outputPathNormalized = str_replace('\\', '/', $outputPath); $relativePath = str_replace($baseDirWithSeparator, '', $outputPathNormalized); $imageUrl = $relativePath; sendJsonResponse(['status' => 'success', 'avatarUrl' => $imageUrl]); } else { sendJsonResponse(['message' => 'Failed save uploaded avatar.'], 500); } break;
        case 'deleteMessage': $messageIdToDelete = $postData['id'] ?? null; if (!$messageIdToDelete) { sendJsonResponse(['message' => 'ID missing.'], 400); break; } $tempLogPath = CHAT_HISTORY_FILE . '.tmp'; $originalLogPath = CHAT_HISTORY_FILE; $found = false; $readFileHandle = @fopen($originalLogPath, 'r'); $writeFileHandle = @fopen($tempLogPath, 'w'); if (!$readFileHandle || !$writeFileHandle) { if($readFileHandle) @fclose($readFileHandle); if($writeFileHandle) @fclose($writeFileHandle); logMessage('error.log', "Err open chat logs for delete (ID: {$messageIdToDelete})."); sendJsonResponse(['message' => 'Could not process chat history.'], 500); break; } if (!flock($writeFileHandle, LOCK_EX)) { @fclose($readFileHandle); @fclose($writeFileHandle); logMessage('error.log', "Could not lock temp chat log."); sendJsonResponse(['message' => 'Could not lock chat history.'], 500); break; } while (($line = fgets($readFileHandle)) !== false) { $lineData = json_decode(trim($line), true); if (json_last_error() !== JSON_ERROR_NONE || !isset($lineData['id']) || $lineData['id'] != $messageIdToDelete) fwrite($writeFileHandle, $line); else $found = true; } fflush($writeFileHandle); flock($writeFileHandle, LOCK_UN); @fclose($readFileHandle); @fclose($writeFileHandle); if (@rename($tempLogPath, $originalLogPath)) { if ($found) sendJsonResponse(['message' => 'Message deleted.']); else sendJsonResponse(['message' => 'Message ID not found.'], 404); } else { logMessage('error.log', "Failed rename temp chat log."); if (file_exists($tempLogPath)) @unlink($tempLogPath); sendJsonResponse(['message' => 'Failed update chat history.'], 500); } break;
        // case 'deleteImage': Removed

        // --- Gift & Auto-Message Actions ---
        case 'sendGift':
             $giftId = $postData['giftId'] ?? null; $giftValue = filter_var($postData['giftValue'] ?? 0, FILTER_VALIDATE_INT); $currentFavorability = filter_var($postData['currentFavorability'] ?? $currentGirlfriendSettings['favorability'] ?? 0, FILTER_VALIDATE_INT); $giftName = $postData['giftName'] ?? $giftId; $gfName = $postData['girlfriendName'] ?? $currentGirlfriendSettings['name']; $userName = $postData['userName'] ?? $currentGirlfriendSettings['userName']; $llmModelId = $postData['llmModelId'] ?? ($currentGirlfriendSettings['selectedLlmModelId'] ?? null); $language = $postData['language'] ?? $currentGirlfriendSettings['language']; if (!$giftId || !$llmModelId) { sendJsonResponse(['message' => 'Missing gift/LLM ID.'], 400); break; }
             $favorabilityChange = $giftValue; $newFavorabilityRaw = $currentFavorability + $favorabilityChange; $newFavorability = max(-1000, min(1000, $newFavorabilityRaw));
             $reactionMessage = "Thank you for the {$giftName}, {$userName}!"; $llmModelsList = readJsonFile(LLM_MODELS_FILE) ?? []; $selectedLlm = findModelDetailsById($llmModelsList, $llmModelId); $affectionInfo = getAffectionDetails($currentFavorability); $affectionDescription = $affectionInfo['description']; $behavioralInstruction = $affectionInfo['instruction'];
             if ($selectedLlm && isset($selectedLlm['endpoint']) && isset($selectedLlm['model'])) { $llmApiUrl = $selectedLlm['endpoint']; $llmModelName = $selectedLlm['model']; $llmApiKey = $selectedLlm['API_KEY'] ?? null; $reactionPromptSystem = "You are {$gfName}. User {$userName} gave you: {$giftName}. Current favorability: {$currentFavorability}. Feeling: **{$affectionDescription}**. {$behavioralInstruction} Generate short, realistic thank you according to feeling. No scores/markers."; $reactionMessages = [['role' => 'system', 'content' => $reactionPromptSystem], ['role' => 'user', 'content' => "What do you say?"]]; $llmPayload = ['model' => $llmModelName, 'messages' => $reactionMessages, 'temperature' => 0.7, 'max_tokens' => 100]; $headers = ['Content-Type' => 'application/json']; if ($llmApiKey) $headers['Authorization'] = "Bearer {$llmApiKey}"; logMessage('llm_request_gift.log', "LLM Gift Req: " . json_encode($llmPayload)); $apiResult = makeApiRequest($llmApiUrl, 'POST', $headers, $llmPayload, 30); logMessage('llm_response_gift.log', "LLM Gift Resp: [{$apiResult['http_code']}] " . $apiResult['response']); if ($apiResult['success'] && $apiResult['response']) { $llmResponseData = json_decode($apiResult['response'], true); if(json_last_error() === JSON_ERROR_NONE && isset($llmResponseData['choices'][0]['message']['content'])) { $responseText = trim($llmResponseData['choices'][0]['message']['content'] ?? ''); if (!empty($responseText)) $reactionMessage = str_replace(['"', "'"], '', $responseText); else logMessage('warning.log', "LLM empty reaction gift: {$giftId}"); } else logMessage('error.log', "LLM gift reaction parsing failed."); } else logMessage('error.log', "LLM API fail gift reaction: {$giftId}. Code: {$apiResult['http_code']}, Err: {$apiResult['error']}"); }
             $userMessageId = generateUniqueFilename('user_gift_'); $girlfriendMessageId = generateUniqueFilename('gf_react_'); $timestamp = time(); $userChatEntry = ['id' => $userMessageId, 'sender' => 'user', 'text' => "[Sent Gift: {$giftName}] (Value: {$giftValue})", 'timestamp' => $timestamp]; $girlfriendChatEntry = ['id' => $girlfriendMessageId, 'sender' => 'girlfriend', 'text' => $reactionMessage, 'timestamp' => $timestamp + 1, 'favorability' => $newFavorability]; $logContentUser = json_encode($userChatEntry, JSON_UNESCAPED_UNICODE) . PHP_EOL; $logContentGf = json_encode($girlfriendChatEntry, JSON_UNESCAPED_UNICODE) . PHP_EOL; writeFileContent(CHAT_HISTORY_FILE, $logContentUser . $logContentGf, FILE_APPEND | LOCK_EX);
             $currentGirlfriendSettings['favorability'] = $newFavorability; if (!writeJsonFile(GF_SETTINGS_FILE, $currentGirlfriendSettings)) logMessage('error.log', "Failed update favorability after gift.");
             $responseToSend = ['newFavorability' => $newFavorability, 'reactionMessage' => $reactionMessage, 'messageId' => $girlfriendMessageId, 'userMessageId' => $userMessageId, 'timestamp' => ($timestamp + 1) * 1000 ]; sendJsonResponse($responseToSend);
             break;
        case 'getAutoMessage':
             $historyContext = $postData['history'] ?? []; $gfSettingsPayload = $postData['girlfriendSettings'] ?? []; $llmModelId = $postData['llmModelId'] ?? ($currentGirlfriendSettings['selectedLlmModelId'] ?? null); $currentFavorability = (int)($postData['currentFavorability'] ?? $currentGirlfriendSettings['favorability'] ?? 0); if (!$llmModelId) { sendJsonResponse(['message' => 'Missing LLM ID.'], 400); break; } $llmModelsList = readJsonFile(LLM_MODELS_FILE) ?? []; $selectedLlm = findModelDetailsById($llmModelsList, $llmModelId); if (!$selectedLlm || !isset($selectedLlm['endpoint']) || !isset($selectedLlm['model'])) { sendJsonResponse(['message' => 'LLM config not found.'], 400); break; } $llmApiUrl = $selectedLlm['endpoint']; $llmModelName = $selectedLlm['model']; $llmApiKey = $selectedLlm['API_KEY'] ?? null;
             $affectionInfo = getAffectionDetails($currentFavorability); $affectionDescription = $affectionInfo['description']; $behavioralInstruction = $affectionInfo['instruction'];
             $autoPromptSystem = "You are {$gfSettingsPayload['name']}, Occ: {$gfSettingsPayload['occupationId']}, Pers: {$gfSettingsPayload['personalityId']}. User: {$gfSettingsPayload['userName']}. "; if (!empty($gfSettingsPayload['notes'])) $autoPromptSystem .= "Notes: {$gfSettingsPayload['notes']}. "; $autoPromptSystem .= "Favorability: {$currentFavorability}. Feeling towards user: **{$affectionDescription}**. {$behavioralInstruction} Generate short, natural, proactive msg girlfriend might send during pause. Ref context/time if appropriate. Act human, no AI talk, no markers. Respond according to feeling."; $autoMessages = [['role' => 'system', 'content' => $autoPromptSystem]]; foreach ($historyContext as $histMsg) { $role = ($histMsg['sender'] === 'user') ? 'user' : 'assistant'; $content = $histMsg['text'] ?? ''; if (!empty($histMsg['imageUrl'])) $content .= ' [Image]'; if (!empty($content)) $autoMessages[] = ['role' => $role, 'content' => $content]; } $autoMessages[] = ['role' => 'user', 'content' => "What would you say proactively?"];
             $llmPayload = ['model' => $llmModelName, 'messages' => $autoMessages, 'temperature' => 0.75, 'max_tokens' => 150]; $headers = ['Content-Type' => 'application/json']; if ($llmApiKey) $headers['Authorization'] = "Bearer {$llmApiKey}"; logMessage('llm_request_auto.log', "LLM AutoMsg Req URL: {$llmApiUrl}, Payload: " . json_encode($llmPayload)); $apiResult = makeApiRequest($llmApiUrl, 'POST', $headers, $llmPayload, 45); logMessage('llm_response_auto.log', "LLM AutoMsg Resp: [{$apiResult['http_code']}] " . $apiResult['response']);
             if ($apiResult['success'] && $apiResult['response']) {
                 $llmResponseData = json_decode($apiResult['response'], true); if(json_last_error() === JSON_ERROR_NONE && isset($llmResponseData['choices'][0]['message']['content'])) { $autoMessageText = trim($llmResponseData['choices'][0]['message']['content'] ?? ''); $autoMessageText = str_replace(['"', "'"], '', $autoMessageText); if (empty($autoMessageText) || strlen($autoMessageText) < 5) { logMessage('warning.log', "LLM empty/short auto message."); sendJsonResponse(['status' => 'success', 'girlfriendMessage' => null]); break; } $girlfriendMessageId = generateUniqueFilename('gf_auto_'); $timestamp = time(); $girlfriendChatEntry = ['id' => $girlfriendMessageId, 'sender' => 'girlfriend', 'text' => $autoMessageText, 'timestamp' => $timestamp, 'isAuto' => true, 'favorability' => $currentFavorability]; $logContentGf = json_encode($girlfriendChatEntry, JSON_UNESCAPED_UNICODE) . PHP_EOL; writeFileContent(CHAT_HISTORY_FILE, $logContentGf, FILE_APPEND | LOCK_EX); sendJsonResponse(['status' => 'success', 'girlfriendMessage' => $autoMessageText, 'messageId' => $girlfriendMessageId, 'newFavorability' => $currentFavorability, 'timestamp' => $timestamp * 1000 ]); } else { logMessage('error.log', 'LLM auto message response parsing failed.'); sendJsonResponse(['message' => 'LLM failed for auto message (parsing error).'], 500); }
             } else { logMessage('error.log', "LLM API fail auto msg. Code: {$apiResult['http_code']}, Err: {$apiResult['error']}"); sendJsonResponse(['message' => 'LLM failed for auto message.'], 500); }
             break;


        default:
            sendJsonResponse(['message' => 'Unknown action requested.'], 400);
            break;
    }
} else {
    sendJsonResponse(['message' => 'No action specified.'], 400);
}

?>